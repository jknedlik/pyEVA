{
    "header": {
        "comment": "This configuration file was automatically created by GParserBuilder",
        "comment": "Tue Jun  1 14:14:19 2021"
    },
    "maxIteration": {
        "comment": "The maximum allowed number of iterations",
        "default": "1000",
        "value": "1000"
    },
    "minIteration": {
        "comment": "The minimum allowed number of iterations",
        "default": "0",
        "value": "0"
    },
    "maxStallIteration": {
        "comment": "The maximum allowed number of iterations without improvement",
        "comment": "0 means: no constraint.",
        "default": "20",
        "value": "20"
    },
    "touchedTermination": {
        "terminationFile": {
            "comment": "The name of a file which, when modified after the start of an",
            "comment": "optimization run, instructs Geneva to terminate optimitation.",
            "comment": "This can be used to \"touch a file\" after the start of an optimization",
            "comment": "run, which will lead to the termination of the run after the current iteration.",
            "default": "empty",
            "value": "empty"
        },
        "touchedTerminationActive": {
            "comment": "Activates (1) or de-activates (0) the \"touched termination\"",
            "default": "false",
            "value": "false"
        }
    },
    "indivdualUpdateStallCounterThreshold": {
        "comment": "The number of iterations without improvement after which",
        "comment": "individuals are asked to update their internal data structures",
        "comment": "through the actOnStalls() function. A value of 0 disables this check",
        "default": "0",
        "value": "0"
    },
    "reportIteration": {
        "comment": "The number of iterations after which a report should be issued",
        "default": "1",
        "value": "1"
    },
    "nRecordBestIndividuals": {
        "comment": "Indicates how many \"best\" individuals should be recorded in each iteration",
        "default": "10",
        "value": "10"
    },
    "cpInterval": {
        "comment": "The number of iterations after which a checkpoint should be written.",
        "comment": "-1 means: Write a checkpoint file whenever an improvement was encountered",
        "comment": " 0 means: Never emit checkpoint files.",
        "default": "0",
        "value": "0"
    },
    "checkpointLocation": {
        "cpDirectory": {
            "comment": "The directory where checkpoint files should be stored.",
            "default": ".\/checkpoints\/",
            "value": ".\/checkpoints\/"
        },
        "cpBaseName": {
            "comment": "The significant part of the checkpoint file name.",
            "default": "geneva.cp",
            "value": "geneva.cp"
        }
    },
    "cpOverwrite": {
        "comment": "When set to \"true\", old checkpoint files will not be kept",
        "default": "true",
        "value": "true"
    },
    "cpSerMode": {
        "comment": "Determines whether check-pointing should be done in",
        "comment": "text- (0), XML- (1), or binary-mode (2)",
        "default": "2",
        "value": "2"
    },
    "qualityTermination": {
        "threshold": {
            "comment": "A threshold beyond which optimization is expected to stop",
            "comment": "Note that in order to activate this threshold, you also need to",
            "comment": "set \"hasQualityThreshold\" to 1.",
            "default": "0",
            "value": "0"
        },
        "thresholdActive": {
            "comment": "Activates (1) or de-activates (0) the quality threshold",
            "default": "false",
            "value": "false"
        }
    },
    "maxDuration": {
        "comment": "The maximum allowed time-frame for the optimization",
        "comment": "in the format hours:minutes:seconds",
        "default": "00:00:00",
        "value": "00:00:00"
    },
    "minDuration": {
        "comment": "The minimum required time-frame for the optimization",
        "comment": "in the format hours:minutes:seconds",
        "default": "00:00:00",
        "value": "00:00:00"
    },
    "emitTerminationReason": {
        "comment": "Triggers emission (1) or omission (0) of information about reasons for termination",
        "default": "true",
        "value": "true"
    },
    "defaultExecutor": {
        "defaultExecMode": {
            "comment": "The default executor type to be used for this algorithm.",
            "comment": "0: serial",
            "comment": "1: multi-threaded",
            "comment": "2: brokered",
            "default": "2",
            "value": "2"
        },
        "defaultExecConfig": {
            "comment": "The configuration file for the default executor. Note that it needs to fit the executor type.",
            "default": ".\/config\/GBrokerExecutor.json",
            "value": ".\/config\/GBrokerExecutor.json"
        }
    },
    "amalgamationLikelihood": {
        "comment": "The likelihood for parent individuals to be \"fused\" together",
        "comment": "rather than \"just\" being created through duplication schemes",
        "default": "0",
        "value": "0"
    },
    "population": {
        "size": {
            "comment": "The total size of the population ",
            "default": "42",
            "value": "42"
        },
        "nParents": {
            "comment": "The number of parents in the population",
            "default": "2",
            "value": "2"
        }
    },
    "recombinationMethod": {
        "comment": "The recombination method. Options",
        "comment": "0: default",
        "comment": "1: random selection from available parents",
        "comment": "2: selection according to the parent's value",
        "default": "0",
        "value": "0"
    },
    "populationGrowth": {
        "growthRate": {
            "comment": "Specifies the number of individuals added per iteration",
            "default": "0",
            "value": "0"
        },
        "maxPopulationSize": {
            "comment": "Specifies the maximum amount of individuals in the population",
            "comment": "if growth is enabled",
            "default": "0",
            "value": "0"
        }
    },
    "nAdaptionThreads": {
        "comment": "The number of threads used to simultaneously adapt individuals",
        "comment": "0 means \"automatic\"",
        "default": "2",
        "value": "2"
    },
    "sortingMethod": {
        "comment": "The sorting scheme. Options",
        "comment": "0: MUPLUSNU mode with a single evaluation criterion",
        "comment": "1: MUCOMMANU mode with a single evaluation criterion",
        "comment": "2: MUCOMMANU mode with single evaluation criterion,",
        "comment": "   the best parent of the last iteration is retained",
        "comment": "   unless a better individual has been found",
        "comment": "3: MUPLUSNU mode for multiple evaluation criteria, pareto selection",
        "comment": "4: MUCOMMANU mode for multiple evaluation criteria, pareto selection",
        "default": "1",
        "value": "1"
    }
}
